/*
 * 异常：是在运行时期发生的不正常情况
 * 
 * 在java中用类的形式对不正常情况进行了描述和封装
 * 
 * 描述不正常的情况的类，就是异常类
 * 
 * 以前将正常流程代码和问题代码相结合，
 * 现在将正常流程代码和问题处理代码分离，提高阅读性
 * 
 *	其实异常就是java通过面向对象的思想将问题封装成了对象
 *	
 *	用异常对其进行了描述
 *	
 *	不同的问题描述成了不同的类，比如角标越界，空指针
 *	
 *	问题很多。意味着描述的类也多。
 *		将异常分为两大类
 *	Throwable,无论是error还是exception问题发生就应该抛出，让调用者
 *		知道。该体系的特点就在于Throwable及其所有的子类都具有可抛性。
 *		可抛性怎么体现？通过两个关键字来体现throws 和 throw，凡是可以被这个
 *		关键字锁操作的类和对象都具有可抛性。
 *		
 *		1，一般不可处理的。Error
 *			由JVM抛出的严重性问题，已经影响到了程序的执行，一般不处理，直接修改源代码
 *		2，可以处理的 。Exception(异常)
 *			
 *		异常的分类：
 *		1，编译时检测异常：只要是Exception和其子类都是，除了特殊子类
 *			RuntimeException体系。这种问题一般希望在编译时就进行检测，让这种
 *			问题有对应的处理方式，有针对性的处理
 *		2，编译时不检测异常(运行时异常)，就是Exception中的 RuntimeException和
 *			其子类，这种问题的发生无法让功能继续，运算无法进行，更多是因为
 *			调用的原因导致的。
 *		
 *		自定义异常时，要么继承Exception。要么继承RuntimeException
 *
 *		throw和throws的区别
 *
 *		1，throws使用在函数上
 *			throw使用在函数内
 *		2，throws抛出的是异常类，可以抛出多个，用逗号隔开
 *			throw抛出的是异常对象。
 *		异常处理的捕捉形式
 *		这是可以对异常进行针对性处理的方式
 *
 *		try{
 *			//需要被检测异常的代码
 *		}catch(异常类 变量){//用于接收发生的异常对象
 *			//处理异常的代码
 *		}finally{
 *			//一定会被执行的代码
 *		}
 *
 *		什么时候catch，什么时候throws？
 *		功能内容可以解决，catch
 *		解决不了，用throws告诉调用者，由调用者解决。
 * */

public class ExceptionDemo {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		int[] arr = new int[3];
		arr[2] = 90;
//		arr = null;
		System.out.println(arr[2]);// 数组角标异常
	}

}
