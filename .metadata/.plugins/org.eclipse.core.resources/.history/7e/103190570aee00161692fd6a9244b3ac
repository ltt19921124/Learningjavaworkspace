package string类;
/* 1,给定一个字符串数组，按照字典顺序从小到大排序
 * 		给定一个字符串数组，按照字典顺序从小到大排序
 * 2,一个子串在整串出现的次数
 * 		"abcghynbacbabauhuinbaabc"
 * 		思路：	1，获取要找的子串是否存在，若存在，获取位置，用indexOf
 * 				2，若找到了，记录出现的位置并在剩余的字符串中查找，而剩余字符串
 * 					起始	位是出现位置+子串的查到
 * 				3，以此类推，通过循环查找，如果找不到就返回-1，并每次找到用
 * 					计数器计数
 * 3,两个字符串中最大相同子串
 * 
 * 
 * */
public class StringTest {

	/**
	 * @param args
	 * 给定一个字符串数组，按照字典顺序从小到大排序
	 * 
	 */
	/*
	 * 排序
	 * 1，对数组排序，可以用选择、冒泡
	 * 2，for循环比较以及换位
	 * 3，问题：以前排的是整数，现在是 字符串对象
	 * 		字符串对象怎么比较呢？对象中提供了字符串比较
	 * 		的功能
	 * 
	 * 
	 * 
	 * */
	public static void main(String[] args) {
		String str = "abcghynbacbanbabauhuinbaabcnbanba";
		String key = "nba";
		
//		int count = getKeyStringCount(str,key);
		int count = getKeyStringCount_2(str,key);
		
		System.out.println("count:" + count);
//		String[] arr = {"nba","abc","cba","zz","qq"};
//		
//		printArray(arr);//[nba,abc,cba,zz,qq]
//		
//		sortString(arr);
//		
//		printArray(arr);//[abc,cba,nba,qq,zz]
	}
	private static int getKeyStringCount_2(String str, String key) {
		int count = 0;
		int index = 0;
		
		while((index = str.indexOf(key,index)) != -1){
			index = index + key.length();
			count ++;
		}
		
		return count;
	}
	/**
	 * 文档注释
	 * 获取子串在整串中出现的次数
	 * @param str
	 * @param key
	 * @return
	 */
	public static int getKeyStringCount(String str, String key) {
		//1,定义计数器
		int count = 0;
		
		//2,定义变量，记录key出现的位置
		int index = 0;
		
			while((index = str.indexOf(key)) != -1){
				str = str.substring(index + key.length());
				count ++;
			}
			
		return count;
	}

	private static void sortString(String[] arr) {
		for (int i = 0; i < arr.length-1; i++) {
			for (int j = i+1; j < arr.length; j++) {
				if(arr[i].compareTo(arr[j])>0){//字符串比较用compareto方法完成
					swap(arr,i,j);
				}
			}
		}
	}
	
	private static void swap(String[] arr, int i, int j) {
		String temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}

	private static void printArray(String[] arr) {
		System.out.print("[");
		for (int i = 0; i < arr.length; i++) {
			if(i!=arr.length-1)
				System.out.print(arr[i]+",");
			else
				System.out.println(arr[i]+"]");
		}
	}
}
