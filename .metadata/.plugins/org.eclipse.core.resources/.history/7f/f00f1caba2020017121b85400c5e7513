package duoxiancheng;

class Ticket implements Runnable{
	private int num = 100;
	Object obj = new Object();
	public void run(){
		while(true){
			synchronized/*同步*/(obj){
				if(num>0){
					try{
						Thread.sleep(10);
					}catch(InterruptedException e){
						
					}
					System.out.println(Thread.currentThread().getName()+"..sale"+num--);
				}
			}
		}
	}
}

class TicketDemo {

	/**
	 * @param args
	 * 线程：concurrency
	 * 线程安全问题出现的原因：
	 * 1，多个线程同时在操作共享数据
	 * 2，操作共享数据的线程代码有多条
	 * 
	 * 
	 * 在java中用同步代码块可以解决这个问题，synchronized
	 * 
	 * 同步代码块：synchronized{
	 * 				
	 * 			  }
	 * 将多条操作共享数据的线程代码封装起来，当有线程在执行这些代码的
	 * 时候，其他线程不可以参与运算。
	 * 必须要当前线程把这些代码都执行完成后，其他的线程才可以运算。
	 * 
	 * 
	 */
	public static void main(String[] args) {
		Ticket t = new Ticket();
		
		
		Thread t1 = new Thread(t);
		Thread t2 = new Thread(t);
		Thread t3 = new Thread(t);
		Thread t4 = new Thread(t);
		
		t1.start();
		t2.start();
		t3.start();
		t4.start();
	}

}







